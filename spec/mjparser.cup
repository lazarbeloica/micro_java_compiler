package rs.ac.bg.etf.pp1.bl130353d;

import java_cup.runtime.*;
import org.apache.log4j.*;

// import java.io.*;

parser code {:
	
	int printCallCount = 0;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

//////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////


/* CONVECTION: all caps */
terminal PROGRAM, IDENT, LBRACE, RBRACE, CONST, EQUALS;
terminal NUMBER, CHAR_CONST, BOOLEAN, COMMA, SEMI, LSQUARE, RSQUARE;
terminal STATIC, CLASS, EXTENDS, VOID, LPAREN, RPAREN, DOT,IF, ELSE, FOR ;
terminal BREAK, CONTINUE, RETURN, READ, PRINT, INC, DEC, MINUS, OR, AND ;
terminal NEW, ISEQUAL, ISNEQUAL, GRTHN, GREEQ, LESSTHN, LESSEQ ;
terminal PLUS, PLUSEQ, MINUSEQ, MUL, DIV, MOD, MULEQ, MODEQ, DIVEQ ;

/* CONVECTION: letter-case */
non terminal Program, VarTypeList, MethodDeclList, ConstDecl, VarDecl, ClassDecl;
non terminal Type, ConstType, ConstBase, ArrayOpt, VarDeclBase;
non terminal StaticOpt, ClassVarDecl, ClassVarDeclBase, ExtendsTypeOpt, ClassMethodDeclOpt ;
non terminal MethodDeclRetType, FormParsOpt, FormPars, MethodPars, VarArgs, VarDeclList;
non terminal StatementList, Statement, FormParsBase, DesignatorStatement, Condition ;
non terminal ElseOpt, DesignatorStatementOpt, ConditionOpt, ExprOpt, Designator, Expr ;
non terminal PrintArg, DesignatorStatementOpps, Assignop, ActParsOpt,ActPars, MinusOpt ;
non terminal Addop, Term, CondTerm, CondFact,Relop, Factor,Mulop, AddopRight ;
non terminal MulopRight, AddopLeft, MulopLeft ;
/* PRECEDENCE */
precedence left ELSE ;

/* THE GRAMMAR */
/* 	CONVECTION: 
*	*Opt -  1 or 0 occurence 
*	*List -  0 or more occurence
*	*Base -  base part
*/

Program ::=	PROGRAM IDENT VarTypeList LBRACE MethodDeclList RBRACE ;


VarTypeList ::=	VarTypeList ConstDecl
				|
				VarTypeList VarDecl
				|
				VarTypeList ClassDecl
				|
				/* epsilon */
				;

ConstDecl ::=	CONST Type ConstBase
				|
				ConstDecl COMMA ConstBase
				|
				ConstDecl SEMI
				;

ConstBase ::= IDENT EQUALS ConstType ;

ConstType ::=	NUMBER
				|
				CHAR_CONST
				|
				BOOLEAN
				;

VarDeclList ::=	VarDeclList VarDecl
				|
				/* epsilon */
				;

VarDecl ::=	Type VarDeclBase
			|
			VarDecl COMMA VarDeclBase
			|
			VarDecl SEMI
			;

VarDeclBase ::=	IDENT ArrayOpt ;

ArrayOpt ::=	LSQUARE RSQUARE
				|
				/* epsilon */
				;

ClassVarDecl ::=	StaticOpt Type ClassVarDeclBase
					|
					ClassVarDecl COMMA ClassVarDeclBase
					|
					ClassVarDecl SEMI
					;

ClassVarDeclBase ::=	 IDENT ArrayOpt ;

StaticOpt ::= 	STATIC
				|
				/* epsilon */
				;

ClassDecl ::=	CLASS IDENT ExtendsTypeOpt LBRACE ClassVarDecl ClassMethodDeclOpt RBRACE ;

ExtendsTypeOpt ::= 	EXTENDS Type
					|
					/* epsilon */
					;

ClassMethodDeclOpt ::=	LBRACE MethodDeclList RBRACE
						|
						/* epsilon */
						;

MethodDeclList ::= StaticOpt MethodDeclRetType LPAREN MethodPars RPAREN VarDeclList LBRACE StatementList RBRACE;

MethodDeclRetType ::=	VOID
						|
						Type
						;

MethodPars ::=	FormPars COMMA VarArgs
				|
				FormParsOpt
				;

VarArgs ::=	Type DOT DOT DOT IDENT ;

FormParsOpt ::=	;

FormPars ::=	FormParsBase
				|
				FormPars COMMA FormParsBase
				;

FormParsBase ::=	Type IDENT ArrayOpt ;

Type ::= IDENT;

StatementList ::=	StatementList Statement
					|
					/* epsilon */
					;

Statement ::=	DesignatorStatement SEMI 
				|
				IF LPAREN Condition RPAREN Statement ElseOpt
				|
				FOR LPAREN DesignatorStatementOpt SEMI ConditionOpt SEMI DesignatorStatementOpt RPAREN Statement
				|
				BREAK SEMI
				|
				CONTINUE SEMI
				|
				RETURN ExprOpt SEMI
				|
				READ LPAREN Designator RPAREN SEMI
				|
				PRINT LPAREN Expr PrintArg RPAREN SEMI
				|
				LBRACE StatementList RBRACE
				;					

PrintArg ::=	COMMA NUMBER ;

ElseOpt ::=	ELSE Statement ;

DesignatorStatementOpt ::=	DesignatorStatement
							|
							/* epsilon */
							;

DesignatorStatement ::=	Designator DesignatorStatementOpps ;

DesignatorStatementOpps ::=	Assignop Expr
							|
							LPAREN ActParsOpt RPAREN
							|
							INC
							|
							DEC
							;

ActParsOpt ::=	ActPars
				|
				/* epsilon */
				;

ActPars ::= Expr
			|
			ActPars COMMA Expr
			;

ConditionOpt ::=	Condition
					|
					/* epsilon */
					;

Condition ::= 	CondTerm
				|
				Condition OR CondTerm
				;

CondTerm ::=	CondFact 
				|
				CondTerm AND CondFact
				;

CondFact ::=	Expr 
				|
				Expr Relop Expr
				;

MinusOpt ::= 	MINUS
				|
				/* epsilon */
				;

ExprOpt ::=	Expr
			|
			/* epilon */
			;

Expr ::=	MinusOpt Term
			|
			Expr Addop Term
			;

Term ::=	Factor
			|
			Term Mulop Factor
			;

Factor ::=	Designator
			|
			Designator LPAREN ActParsOpt RPAREN
			|
			NUMBER
			|
			CHAR_CONST
			|
			BOOLEAN
			|
			NEW Type
			|
			NEW Type LSQUARE Expr RSQUARE
			|
			LPAREN Expr RPAREN
			;

Designator ::=	IDENT
				|
				Designator DOT IDENT
				|
				Designator LSQUARE Expr RSQUARE
				;

Assignop ::=	EQUALS
				|
				AddopRight
				|
				MulopRight
				;


Relop ::=	ISEQUAL
			|
			ISNEQUAL
			|
			GRTHN
			|
			GREEQ
			|
			LESSTHN
			|
			LESSEQ
			;

Addop ::=	AddopRight
			|
			AddopLeft
			;

AddopLeft ::=	PLUS
				|
				MINUS
				;

AddopRight ::=	PLUSEQ
				|
				MINUSEQ
				;

Mulop ::= 	MulopLeft
			|
			MulopRight 
			;

MulopLeft ::=	MUL
				|
				DIV
				|
				MOD
				;

MulopRight ::=	MULEQ
				|
				DIVEQ
				|
				MODEQ
				;
